# -*- coding: utf-8 -*-
"""crf_tp3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16oBQOHwWAkIFxpmX-xBW6PG6TFEVSBqQ
"""

!pip install python-crfsuite
import pycrfsuite
#from spacy.training.iob_utils import offsets_to_biluo_tags
import numpy as np
from sklearn.metrics import f1_score
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.metrics import classification_report

import json
import warnings
warnings.filterwarnings("ignore")

def read_iob2_file(filepath):
    sentences = []
    file = open(filepath, 'r', encoding='utf-8')
    sentence = []
    for line in file:
      if "# sent_id" in line:
        sentences.append(sentence)
        sentence = []
        continue
      line = line.strip()
      parts = line.split('\t')
      try:
        token, label = parts[1], parts[2]
        sentence.append((token, label))
      except IndexError:
        continue
      token, label = parts[1], parts[2]
      sentence.append((token, label))
      if sentence:
        sentences.append(sentence)
    return sentences

def extract_features(sentence):
    features = []
    for i, (token, label) in enumerate(sentence):
        feature = {
            'token.lower()': token.lower(),
            'token.isupper()': token.isupper(),
            'token.isdigit()': token.isdigit(),
        }
        if i==0:
            feature['BOS'] = True  #First word of a sentence
        features.append(feature)
    return features

def prepare_data(sentences):
    f, l = [], []
    for sentence in sentences:
        features = extract_features(sentence)
        labels = [label for _, label in sentence]
        f.append(features)
        l.append(labels)
    return f, l

#English
train_sentences = read_iob2_file("en_ewt-ud-train.iob2")
test_sentences = read_iob2_file("en_ewt-ud-test.iob2")

X_train, y_train = prepare_data(train_sentences)
X_test, y_test = prepare_data(test_sentences)

trainer = pycrfsuite.Trainer()
for x, y in zip(X_train, y_train):
    trainer.append(x, y)

trainer.set_params({'max_iterations': 20})

model_file = 'ner_model.crfsuite'
trainer.train(model_file)

tagger = pycrfsuite.Tagger()
tagger.open(model_file)

y_pred = [tagger.tag(x) for x in X_test]

y_true = [label for labels in y_test for label in labels]
y_pred_flat = [label for labels in y_pred for label in labels]

print("Classification Report for: English")
print(classification_report(y_true, y_pred_flat))

#Danish
train_sentences = read_iob2_file("da_ddt-ud-train.iob2")
test_sentences = read_iob2_file("da_ddt-ud-test.iob2")

X_train, y_train = prepare_data(train_sentences)
X_test, y_test = prepare_data(test_sentences)

trainer = pycrfsuite.Trainer()
for x, y in zip(X_train, y_train):
    trainer.append(x, y)

trainer.set_params({'max_iterations': 20})

model_file = 'ner_model.crfsuite'
trainer.train(model_file)

tagger = pycrfsuite.Tagger()
tagger.open(model_file)

y_pred = [tagger.tag(x) for x in X_test]

y_true = [label for labels in y_test for label in labels]
y_pred_flat = [label for labels in y_pred for label in labels]

print("Classification Report for: Danish")
print(classification_report(y_true, y_pred_flat))

#Croatian
train_sentences = read_iob2_file("hr_set-ud-train.iob2")
test_sentences = read_iob2_file("hr_set-ud-test.iob2")

X_train, y_train = prepare_data(train_sentences)
X_test, y_test = prepare_data(test_sentences)

trainer = pycrfsuite.Trainer()
for x, y in zip(X_train, y_train):
    trainer.append(x, y)

trainer.set_params({'max_iterations': 20})

model_file = 'ner_model.crfsuite'
trainer.train(model_file)

tagger = pycrfsuite.Tagger()
tagger.open(model_file)

y_pred = [tagger.tag(x) for x in X_test]

y_true = [label for labels in y_test for label in labels]
y_pred_flat = [label for labels in y_pred for label in labels]

print("Classification Report for: Croatian")
print(classification_report(y_true, y_pred_flat))

#Portuguese
train_sentences = read_iob2_file("pt_bosque-ud-train.iob2")
test_sentences = read_iob2_file("pt_bosque-ud-test.iob2")

X_train, y_train = prepare_data(train_sentences)
X_test, y_test = prepare_data(test_sentences)

trainer = pycrfsuite.Trainer()
for x, y in zip(X_train, y_train):
    trainer.append(x, y)

trainer.set_params({'max_iterations': 20})

model_file = 'ner_model.crfsuite'
trainer.train(model_file)

tagger = pycrfsuite.Tagger()
tagger.open(model_file)

y_pred = [tagger.tag(x) for x in X_test]

y_true = [label for labels in y_test for label in labels]
y_pred_flat = [label for labels in y_pred for label in labels]

print("Classification Report for: Portuguese")
print(classification_report(y_true, y_pred_flat))

#Slovak
train_sentences = read_iob2_file("sk_snk-ud-train.iob2")
test_sentences = read_iob2_file("sk_snk-ud-test.iob2")

X_train, y_train = prepare_data(train_sentences)
X_test, y_test = prepare_data(test_sentences)

trainer = pycrfsuite.Trainer()
for x, y in zip(X_train, y_train):
    trainer.append(x, y)

trainer.set_params({'max_iterations': 20})

model_file = 'ner_model.crfsuite'
trainer.train(model_file)

tagger = pycrfsuite.Tagger()
tagger.open(model_file)

y_pred = [tagger.tag(x) for x in X_test]

y_true = [label for labels in y_test for label in labels]
y_pred_flat = [label for labels in y_pred for label in labels]

print("Classification Report for: Slovak")
print(classification_report(y_true, y_pred_flat))

#Swedish
train_sentences = read_iob2_file("sv_talbanken-ud-train.iob2")
test_sentences = read_iob2_file("sv_talbanken-ud-test.iob2")

X_train, y_train = prepare_data(train_sentences)
X_test, y_test = prepare_data(test_sentences)

trainer = pycrfsuite.Trainer()
for x, y in zip(X_train, y_train):
    trainer.append(x, y)

trainer.set_params({'max_iterations': 20})

model_file = 'ner_model.crfsuite'
trainer.train(model_file)

tagger = pycrfsuite.Tagger()
tagger.open(model_file)

y_pred = [tagger.tag(x) for x in X_test]

y_true = [label for labels in y_test for label in labels]
y_pred_flat = [label for labels in y_pred for label in labels]

print("Classification Report for: Swedish")
print(classification_report(y_true, y_pred_flat))

#Serbian
train_sentences = read_iob2_file("sr_set-ud-train.iob2")
test_sentences = read_iob2_file("sr_set-ud-test.iob2")

X_train, y_train = prepare_data(train_sentences)
X_test, y_test = prepare_data(test_sentences)

trainer = pycrfsuite.Trainer()
for x, y in zip(X_train, y_train):
    trainer.append(x, y)

trainer.set_params({'max_iterations': 20})

model_file = 'ner_model.crfsuite'
trainer.train(model_file)

tagger = pycrfsuite.Tagger()
tagger.open(model_file)

y_pred = [tagger.tag(x) for x in X_test]

y_true = [label for labels in y_test for label in labels]
y_pred_flat = [label for labels in y_pred for label in labels]

print("Classification Report for: Serbian")
print(classification_report(y_true, y_pred_flat))

#Chinese
train_sentences = read_iob2_file("zh_gsdsimp-ud-train.iob2")
test_sentences = read_iob2_file("zh_gsdsimp-ud-test.iob2")

X_train, y_train = prepare_data(train_sentences)
X_test, y_test = prepare_data(test_sentences)

trainer = pycrfsuite.Trainer()
for x, y in zip(X_train, y_train):
    trainer.append(x, y)

trainer.set_params({'max_iterations': 20})

model_file = 'ner_model.crfsuite'
trainer.train(model_file)

tagger = pycrfsuite.Tagger()
tagger.open(model_file)

y_pred = [tagger.tag(x) for x in X_test]

y_true = [label for labels in y_test for label in labels]
y_pred_flat = [label for labels in y_pred for label in labels]

print("Classification Report for: Chinese")
print(classification_report(y_true, y_pred_flat))